from fastapi import FastAPI, File, UploadFile, Form, HTTPException, Request
from fastapi.responses import StreamingResponse, HTMLResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.middleware.cors import CORSMiddleware
import json
from typing import Optional
from pydantic import BaseModel
import cv2
import numpy as np
from PIL import Image
import glob
import os
# import torch
# torch.cuda.is_available = lambda : False  # –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ CPU –¥–ª—è PyTorch

default_kbl_path = './kblist/'  # –ü—É—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è —Ñ–∞–π–ª—ã –ë–∞–∑—ã –ó–Ω–∞–Ω–∏–π

app = FastAPI(title="KIA GPT System API", version="0.1.0", debug=True)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

def get_latest_kblist(path):  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–∞–º–æ–π –ø–æ—Å–ª–µ–¥–Ω–µ–π –ë–∞–∑—ã –ó–Ω–∞–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ MarkDown (*.md)
    list_of_files = glob.glob(f'{path}*.md')
    if not list_of_files:
        return None  # –ù–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ë–ó –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    latest_kblist = max(list_of_files, key=os.path.getctime)  # –í—ã–±–∏—Ä–∞–µ–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π —Ñ–∞–π–ª –ë–ó
    print(f'‚ôªÔ∏è  Last KB List: {latest_kblist}')
    return latest_kblist


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.mount('/static', StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="templates")


@app.get("/", response_class=HTMLResponse)
async def read_root(request: Request):
    kblist_files = list_kblist()  # —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
    print(f"\nüõí –°–ø–∏—Å–æ–∫ –î–æ—Å—Ç—É–ø–Ω—ã—Ö –ë–∞–∑ –ó–Ω–∞–Ω–∏–π: {kblist_files['KB List']}")
    return templates.TemplateResponse("index.html", {"request": request, "kblist": kblist_files['KB List']})


@app.get('/info')
def read_root():
    return {'Project 2023': 'ü§ñ KIA GPT System - "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–π—Ä–æ-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∫–ª–∏–µ–Ω—Ç–æ–≤" [–≥. –ú–æ—Å–∫–≤–∞, 2023 –≥.]'}


@app.get('/kblist')
def list_models():
    kblist_dir = "kblist"
    kblist = []

    for filename in os.listdir(kblist_dir):
        if filename.endswith(".h5") or filename.endswith(".md"):  # –†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ë–ó
            kblist.append(filename)
    #return JSONResponse(content={"KB List": kblist})
    return {"KB List": kblist}


@app.post('/predict')
async def predict():
  pass


@app.post('/audio')
async def whisperfile():
  pass


@app.post('/summ')
async def sbersumm():
  pass
    

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
